{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","ax","create","baseURL","App","useState","salaryData","setSalaryData","ageData","setAgeData","progress","setProgress","queue","setQueue","queueList","setQueueList","loading","setLoading","fetchQueues","status","get","then","response","data","length","title","reverse","catch","error","console","log","useEffect","socket","io","on","queueTitle","numEmployeesProcessed","setupSocketClient","Promise","all","responseData","labels","map","x","values","avg_salary","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","avg_age","style","display","width","height","position","zIndex","justifyContent","alignItems","margin","q","i","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.571b0675.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport ax from 'axios';\r\nimport io from 'socket.io-client';\r\n\r\nconst API_URL = `http://localhost:3000`;\r\nconst axios = ax.create({\r\n  baseURL: API_URL\r\n});\r\n\r\nconst App = () => {\r\n\r\n  const [salaryData, setSalaryData] = useState({});\r\n  const [ageData, setAgeData] = useState({});\r\n  const [progress, setProgress] = useState(0);\r\n  const [queue, setQueue] = useState('');\r\n  const [queueList, setQueueList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const setupSocketClient = () => {\r\n    const socket = io(API_URL);\r\n    socket.on('connect', () => console.log('you are connected'));\r\n    socket.on('disconnect', () => console.log('you are disconnected'));\r\n    \r\n    socket.on('queue', queueTitle => {\r\n      setQueue(queueTitle);\r\n      fetchQueues('inactive');\r\n    });\r\n    socket.on('progress', numEmployeesProcessed => {\r\n      setProgress(numEmployeesProcessed);\r\n    });\r\n  };\r\n\r\n  const fetchChartsData = () => {\r\n    Promise.all([\r\n      axios.get(`/employees/avg-salaries`),\r\n      axios.get(`/employees/avg-ages`)\r\n    ])\r\n    .then(response => {\r\n      console.log(response);\r\n      if (response[0].status === 200) {\r\n        const responseData = response[0].data;\r\n        const labels = responseData.map(x => x.title);\r\n        const values = responseData.map(x => x.avg_salary);\r\n        setSalaryData({\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: 'Average Salary Per Job Title',\r\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n              borderColor: 'rgba(255, 99, 132, 1)',\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: 'rgba(255, 99, 132, 0.4)',\r\n              hoverBorderColor: 'rgba(255, 99, 132, 1)',\r\n              data: values\r\n            }\r\n          ]\r\n        });\r\n      }\r\n      if (response[1].status === 200) {\r\n        const responseData = response[1].data;\r\n        const labels = responseData.map(x => x.title);\r\n        const values = responseData.map(x => x.avg_age);\r\n        setAgeData({\r\n          labels,\r\n          datasets: [\r\n            {\r\n              label: 'Average Age Per Job Title',\r\n              backgroundColor: 'rgba(0, 99, 132, 0.2)',\r\n              borderColor: 'rgba(0, 99, 132, 1)',\r\n              borderWidth: 1,\r\n              hoverBackgroundColor: 'rgba(0, 99, 132, 0.4)',\r\n              hoverBorderColor: 'rgba(0, 99, 132, 1)',\r\n              data: values\r\n            }\r\n          ]\r\n        });\r\n      }\r\n\r\n      setLoading(false);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const fetchQueues = status => {\r\n    axios.get(`/queues/kue-api/jobs/${status}/0..10/desc`)\r\n      .then(response => {\r\n        if (response.status === 200 && response.data.length > 0) {\r\n          if (status === 'active') {\r\n            setQueue(response.data[0].data.title);\r\n          }\r\n          else {\r\n            response.data.reverse();\r\n            setQueueList(response.data);\r\n          }\r\n          \r\n        }\r\n      })\r\n      .catch(error => console.log(error));\r\n  }\r\n\r\n  const generateAbsenceData = () => {\r\n    axios.get(`/queues/kue-api/jobs/active/0..10/desc`)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        if (response.status === 200) {\r\n          if (response.data.length <= 0) {\r\n            axios.get(`/queues/enqueue`)\r\n              .then(response => {\r\n                if (response.status === 200) {\r\n                  axios.get(`/queues/process`)\r\n                    .then(response => {\r\n                      console.log(response);\r\n                    })\r\n                    .catch(error => console.log(error));\r\n                }\r\n              })\r\n              .catch(error => console.log(error));\r\n          }\r\n          else {\r\n            setQueue(response.data[0].data.title);\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n    \r\n  };\r\n\r\n  useEffect(() => {\r\n    setupSocketClient();\r\n    fetchChartsData();\r\n    fetchQueues('active');\r\n    fetchQueues('inactive');\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n\r\n      <div style={{\r\n        width: '100%',\r\n        height: '100vh',\r\n        position: 'fixed',\r\n        zIndex: 10,\r\n        backgroundColor: 'rgba(0, 0, 0, 0.2)',\r\n        display: loading ? 'flex' : 'none',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n      }}>\r\n        Loading...\r\n      </div>\r\n\r\n      <div style={{\r\n        width: 500,\r\n        margin: 10\r\n      }}>\r\n        <Bar\r\n          width={500}\r\n          height={200}\r\n          data={salaryData}/>\r\n        <Bar\r\n          width={500}\r\n          height={200}\r\n          data={ageData}/>\r\n      </div>\r\n      <div>\r\n        <div>Active Queue: {queue}</div>\r\n        <div>Progress: {progress} employees</div>\r\n        <br/><br/>\r\n        <div>\r\n          <p>Queue List</p>\r\n          <ul>\r\n            {queueList.map((q, i) => (\r\n              <li key={i}>{q.data.title}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <br/><br/>\r\n        <button onClick={generateAbsenceData}>Execute Queues</button>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}