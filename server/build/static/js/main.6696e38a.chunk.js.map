{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","ax","create","baseURL","App","useState","salaryData","setSalaryData","ageData","setAgeData","progress","setProgress","queue","setQueue","useEffect","socket","io","on","console","log","queueTitle","numEmployeesProcessed","setupSocketClient","Promise","all","get","then","response","status","responseData","data","labels","map","x","title","values","avg_salary","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","avg_age","catch","error","style","display","width","margin","height","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mNAMMA,EAAQC,IAAGC,OAAO,CACtBC,QAFW,0BAsHEC,EAjHH,WAAO,IAAD,EAEoBC,mBAAS,IAF7B,mBAETC,EAFS,KAEGC,EAFH,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIgBJ,mBAAS,GAJzB,mBAITK,EAJS,KAICC,EAJD,OAKUN,mBAAS,IALnB,mBAKTO,EALS,KAKFC,EALE,KAwFhB,OALAC,qBAAU,YA5EgB,WACxB,IAAMC,EAASC,IAbN,yBAcTD,EAAOE,GAAG,WAAW,kBAAMC,QAAQC,IAAI,wBACvCJ,EAAOE,GAAG,cAAc,kBAAMC,QAAQC,IAAI,2BAE1CJ,EAAOE,GAAG,SAAS,SAAAG,GAAU,OAAIP,EAASO,MAC1CL,EAAOE,GAAG,YAAY,SAAAI,GACpBV,EAAYU,MAsEdC,GAjEAC,QAAQC,IAAI,CACVxB,EAAMyB,IAAN,2BACAzB,EAAMyB,IAAN,yBAEDC,MAAK,SAAAC,GAEJ,GADAT,QAAQC,IAAIQ,GACe,MAAvBA,EAAS,GAAGC,OAAgB,CAC9B,IAAMC,EAAeF,EAAS,GAAGG,KAC3BC,EAASF,EAAaG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SACjCC,EAASN,EAAaG,KAAI,SAAAC,GAAC,OAAIA,EAAEG,cACvC7B,EAAc,CACZwB,SACAM,SAAU,CACR,CACEC,MAAO,+BACPC,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,EACbC,qBAAsB,0BACtBC,iBAAkB,wBAClBb,KAAMK,MAKd,GAA2B,MAAvBR,EAAS,GAAGC,OAAgB,CAC9B,IAAMC,EAAeF,EAAS,GAAGG,KAC3BC,EAASF,EAAaG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SACjCC,EAASN,EAAaG,KAAI,SAAAC,GAAC,OAAIA,EAAEW,WACvCnC,EAAW,CACTsB,SACAM,SAAU,CACR,CACEC,MAAO,4BACPC,gBAAiB,wBACjBC,YAAa,sBACbC,YAAa,EACbC,qBAAsB,wBACtBC,iBAAkB,sBAClBb,KAAMK,UAMfU,OAAM,SAAAC,GACL5B,QAAQC,IAAI2B,QAqBb,IAGD,yBAAKC,MAAO,CAAEC,QAAS,SACrB,yBAAKD,MAAO,CACVE,MAAO,IACPC,OAAQ,KAER,kBAAC,MAAD,CACED,MAAO,IACPE,OAAQ,IACRrB,KAAMxB,IACR,kBAAC,MAAD,CACE2C,MAAO,IACPE,OAAQ,IACRrB,KAAMtB,KAEV,6BACE,4BAAQ4C,QAnCc,WAC1BpD,EAAMyB,IAAN,mBACGC,MAAK,SAAAC,GACoB,MAApBA,EAASC,QACX5B,EAAMyB,IAAN,mBACGC,MAAK,SAAAC,GACJT,QAAQC,IAAIQ,MAEbkB,OAAM,SAAAC,GAAK,OAAI5B,QAAQC,IAAI2B,SAGjCD,OAAM,SAAAC,GAAK,OAAI5B,QAAQC,IAAI2B,QAwB1B,yBACA,uCAAalC,GACb,wCAAcF,MCxGF2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMsB,a","file":"static/js/main.6696e38a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport ax from 'axios';\nimport io from 'socket.io-client';\n\nconst API_URL = `http://localhost:3000`;\nconst axios = ax.create({\n  baseURL: API_URL\n});\n\nconst App = () => {\n\n  const [salaryData, setSalaryData] = useState({});\n  const [ageData, setAgeData] = useState({});\n  const [progress, setProgress] = useState(0);\n  const [queue, setQueue] = useState('');\n\n  const setupSocketClient = () => {\n    const socket = io(API_URL);\n    socket.on('connect', () => console.log('you are connected'));\n    socket.on('disconnect', () => console.log('you are disconnected'));\n    \n    socket.on('queue', queueTitle => setQueue(queueTitle));\n    socket.on('progress', numEmployeesProcessed => {\n      setProgress(numEmployeesProcessed);\n    });\n  };\n\n  const fetchChartsData = () => {\n    Promise.all([\n      axios.get(`/employees/avg-salaries`),\n      axios.get(`/employees/avg-ages`)\n    ])\n    .then(response => {\n      console.log(response);\n      if (response[0].status === 200) {\n        const responseData = response[0].data;\n        const labels = responseData.map(x => x.title);\n        const values = responseData.map(x => x.avg_salary);\n        setSalaryData({\n          labels,\n          datasets: [\n            {\n              label: 'Average Salary Per Job Title',\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              borderColor: 'rgba(255, 99, 132, 1)',\n              borderWidth: 1,\n              hoverBackgroundColor: 'rgba(255, 99, 132, 0.4)',\n              hoverBorderColor: 'rgba(255, 99, 132, 1)',\n              data: values\n            }\n          ]\n        });\n      }\n      if (response[1].status === 200) {\n        const responseData = response[1].data;\n        const labels = responseData.map(x => x.title);\n        const values = responseData.map(x => x.avg_age);\n        setAgeData({\n          labels,\n          datasets: [\n            {\n              label: 'Average Age Per Job Title',\n              backgroundColor: 'rgba(0, 99, 132, 0.2)',\n              borderColor: 'rgba(0, 99, 132, 1)',\n              borderWidth: 1,\n              hoverBackgroundColor: 'rgba(0, 99, 132, 0.4)',\n              hoverBorderColor: 'rgba(0, 99, 132, 1)',\n              data: values\n            }\n          ]\n        });\n      }\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  };\n\n  const generateAbsenceData = () => {\n    axios.get(`/queues/enqueue`)\n      .then(response => {\n        if (response.status === 200) {\n          axios.get(`/queues/process`)\n            .then(response => {\n              console.log(response);\n            })\n            .catch(error => console.log(error));\n        }\n      })\n      .catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    setupSocketClient();\n    fetchChartsData();\n  }, []);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div style={{\n        width: 500,\n        margin: 10\n      }}>\n        <Bar\n          width={500}\n          height={200}\n          data={salaryData}/>\n        <Bar\n          width={500}\n          height={200}\n          data={ageData}/>\n      </div>\n      <div>\n        <button onClick={generateAbsenceData}>Generate Absence Data</button>\n        <div>Queue: {queue}</div>\n        <div>Status: {progress}</div>\n      </div>\n    </div>\n    \n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}